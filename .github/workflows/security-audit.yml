name: Security Audit

on:
  schedule:
    - cron: '0 2 * * 1'  # Weekly on Monday at 2 AM UTC
  workflow_dispatch:
    inputs:
      audit_scope:
        description: 'Scope of security audit'
        required: true
        type: choice
        options:
        - full
        - infrastructure
        - dependencies
        default: 'full'

permissions:
  contents: read
  security-events: write
  actions: read

jobs:
  security-audit:
    name: Comprehensive Security Audit
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.12'
        cache: 'pip'

    - name: Install security tools
      run: |
        pip install \
          bandit \
          safety \
          semgrep \
          checkov \
          detect-secrets
        
        # Install additional tools
        curl -sSfL https://raw.githubusercontent.com/anchore/grype/main/install.sh | sh -s -- -b /usr/local/bin
        curl -sSfL https://raw.githubusercontent.com/anchore/syft/main/install.sh | sh -s -- -b /usr/local/bin

    - name: Run infrastructure security scan
      if: github.event.inputs.audit_scope == 'full' || github.event.inputs.audit_scope == 'infrastructure'
      run: |
        echo "Running infrastructure security audit..."
        cd iac/terraform
        
        # Checkov scan with comprehensive rules
        checkov -d . \
          --output-file-path ../../checkov-audit.sarif \
          --output sarif \
          --framework terraform \
          --check CKV_AWS_18,CKV_AWS_21,CKV_AWS_144,CKV_AWS_20,CKV_AWS_57 \
          || true

    - name: Run secrets detection
      run: |
        echo "Scanning for secrets..."
        detect-secrets scan --all-files --baseline .secrets.baseline || true
        
        # Generate SARIF for secrets
        echo '{"version": "2.1.0", "runs": [{"tool": {"driver": {"name": "detect-secrets"}}, "results": []}]}' > secrets-audit.sarif

    - name: Run dependency vulnerability scan
      if: github.event.inputs.audit_scope == 'full' || github.event.inputs.audit_scope == 'dependencies'
      run: |
        echo "Scanning for dependency vulnerabilities..."
        
        # Create a requirements file for scanning
        echo "checkov" > requirements-audit.txt
        echo "terraform" >> requirements-audit.txt
        
        # Safety scan
        safety check --json --output safety-results.json || true
        
        # Convert to SARIF format
        echo '{"version": "2.1.0", "runs": [{"tool": {"driver": {"name": "safety"}}, "results": []}]}' > safety-audit.sarif

    - name: Run SAST analysis
      run: |
        echo "Running static application security testing..."
        
        # Semgrep scan
        semgrep --config=auto --sarif --output=semgrep-audit.sarif . || true

    - name: Validate SARIF files
      run: |
        echo "Validating generated SARIF files..."
        for file in *-audit.sarif; do
          if [ -f "$file" ]; then
            echo "✅ $file generated successfully"
          else
            echo "❌ $file not found"
          fi
        done

    - name: Upload Infrastructure SARIF
      uses: github/codeql-action/upload-sarif@v3
      if: always() && (github.event.inputs.audit_scope == 'full' || github.event.inputs.audit_scope == 'infrastructure')
      with:
        sarif_file: checkov-audit.sarif
        category: infrastructure-audit

    - name: Upload Secrets SARIF
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: secrets-audit.sarif
        category: secrets-audit

    - name: Upload Dependencies SARIF
      uses: github/codeql-action/upload-sarif@v3
      if: always() && (github.event.inputs.audit_scope == 'full' || github.event.inputs.audit_scope == 'dependencies')
      with:
        sarif_file: safety-audit.sarif
        category: dependencies-audit

    - name: Upload SAST SARIF
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: semgrep-audit.sarif
        category: sast-audit

    - name: Upload audit artifacts
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: security-audit-results-${{ github.sha }}
        path: |
          *-audit.sarif
          safety-results.json
          .secrets.baseline
        retention-days: 90

    - name: Generate security summary
      if: always()
      run: |
        echo "## 🔒 Security Audit Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 🎯 Audit Configuration:" >> $GITHUB_STEP_SUMMARY
        echo "- **Scope**: ${{ github.event.inputs.audit_scope || 'full' }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Trigger**: ${{ github.event_name }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 🔍 Security Scans Performed:" >> $GITHUB_STEP_SUMMARY
        echo "- Infrastructure security (Checkov)" >> $GITHUB_STEP_SUMMARY
        echo "- Secrets detection (detect-secrets)" >> $GITHUB_STEP_SUMMARY
        echo "- Dependency vulnerabilities (Safety)" >> $GITHUB_STEP_SUMMARY
        echo "- Static analysis (Semgrep)" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 📊 Results:" >> $GITHUB_STEP_SUMMARY
        echo "- All SARIF files uploaded to GitHub Security" >> $GITHUB_STEP_SUMMARY
        echo "- Detailed results available in Security tab" >> $GITHUB_STEP_SUMMARY