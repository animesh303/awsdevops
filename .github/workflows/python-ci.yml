name: Python CI

on:
  push:
    branches: [main, develop]
    paths:
      - "src/**"
      - "tests/**"
      - "requirements.txt"
      - ".github/workflows/python-ci.yml"
  pull_request:
    branches: [main]
    paths:
      - "src/**"
      - "tests/**"
      - "requirements.txt"
      - ".github/workflows/python-ci.yml"

permissions:
  contents: read
  security-events: write

jobs:
  python-lint:
    name: Python Lint
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.10", "3.11", "3.12"]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'pip'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r src/web-application/requirements.txt
        pip install flake8 flake8-sarif-formatter
    
    - name: Run Flake8 (SARIF)
      run: |
        flake8 src/ --format sarif --output-file flake8-results.sarif
      continue-on-error: true
    
    - name: Upload Flake8 SARIF
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: flake8-results.sarif
        category: flake8

  python-security:
    name: Python Security
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"
        cache: 'pip'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install bandit[toml]
    
    - name: Run Bandit (SARIF)
      run: |
        bandit -r src/ -f sarif -o bandit-results.sarif || true
    
    - name: Upload Bandit SARIF
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: bandit-results.sarif
        category: bandit

  python-tests:
    name: Python Tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.10", "3.11", "3.12"]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'pip'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r src/web-application/requirements.txt
        pip install pytest pytest-cov
    
    - name: Run tests with coverage
      run: |
        cd tests/three-tier-application
        python -m pytest --cov=../../src/web-application --cov-report=xml --cov-report=html
    
    - name: Upload coverage reports
      uses: actions/upload-artifact@v4
      if: matrix.python-version == '3.11'
      with:
        name: coverage-reports
        path: |
          tests/three-tier-application/coverage.xml
          tests/three-tier-application/htmlcov/