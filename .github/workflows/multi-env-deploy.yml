name: Multi-Environment Deployment

on:
  workflow_dispatch:
    inputs:
      target_environment:
        description: 'Target environment for deployment'
        required: true
        type: choice
        options:
        - development
        - staging
        - production
      deploy_infrastructure:
        description: 'Deploy infrastructure changes'
        required: false
        type: boolean
        default: false
      deploy_website:
        description: 'Deploy website changes'
        required: false
        type: boolean
        default: true

permissions:
  contents: read
  id-token: write
  security-events: write

jobs:
  validate-environment:
    name: Validate Environment Configuration
    runs-on: ubuntu-latest
    outputs:
      environment: ${{ steps.env.outputs.environment }}
      requires_approval: ${{ steps.env.outputs.requires_approval }}
    
    steps:
    - name: Set environment configuration
      id: env
      run: |
        case "${{ github.event.inputs.target_environment }}" in
          "production")
            echo "environment=production" >> $GITHUB_OUTPUT
            echo "requires_approval=true" >> $GITHUB_OUTPUT
            ;;
          "staging")
            echo "environment=staging" >> $GITHUB_OUTPUT
            echo "requires_approval=false" >> $GITHUB_OUTPUT
            ;;
          "development")
            echo "environment=development" >> $GITHUB_OUTPUT
            echo "requires_approval=false" >> $GITHUB_OUTPUT
            ;;
        esac

  deploy-infrastructure:
    name: Deploy Infrastructure
    runs-on: ubuntu-latest
    needs: validate-environment
    if: github.event.inputs.deploy_infrastructure == 'true'
    environment: ${{ needs.validate-environment.outputs.environment }}
    defaults:
      run:
        working-directory: iac/terraform
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
        aws-region: ${{ vars.AWS_REGION || 'us-east-1' }}

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ~1.0

    - name: Create environment-specific tfvars
      run: |
        cat > terraform.tfvars << EOF
        environment = "${{ needs.validate-environment.outputs.environment }}"
        aws_region = "${{ vars.AWS_REGION || 'us-east-1' }}"
        project_name = "static-website-${{ needs.validate-environment.outputs.environment }}"
        cost_center = "engineering"
        owner = "devops-team"
        backup_required = true
        compliance_level = "${{ needs.validate-environment.outputs.environment == 'production' && 'high' || 'standard' }}"
        EOF

    - name: Terraform Init
      run: terraform init

    - name: Terraform Plan
      run: terraform plan -var-file=terraform.tfvars

    - name: Terraform Apply
      if: needs.validate-environment.outputs.environment != 'production' || github.event.inputs.target_environment == 'production'
      run: terraform apply -var-file=terraform.tfvars -auto-approve

  deploy-website:
    name: Deploy Website
    runs-on: ubuntu-latest
    needs: [validate-environment, deploy-infrastructure]
    if: always() && github.event.inputs.deploy_website == 'true' && (needs.deploy-infrastructure.result == 'success' || needs.deploy-infrastructure.result == 'skipped')
    environment: ${{ needs.validate-environment.outputs.environment }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
        aws-region: ${{ vars.AWS_REGION || 'us-east-1' }}

    - name: Deploy to environment
      uses: ./.github/workflows/website-deploy.yml
      with:
        environment: ${{ needs.validate-environment.outputs.environment }}

  generate-summary:
    name: Generate Deployment Summary
    runs-on: ubuntu-latest
    needs: [validate-environment, deploy-infrastructure, deploy-website]
    if: always()
    
    steps:
    - name: Generate multi-environment summary
      run: |
        echo "## ðŸš€ Multi-Environment Deployment Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### ðŸŽ¯ Deployment Configuration:" >> $GITHUB_STEP_SUMMARY
        echo "- **Target Environment**: ${{ needs.validate-environment.outputs.environment }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Infrastructure Deployment**: ${{ github.event.inputs.deploy_infrastructure }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Website Deployment**: ${{ github.event.inputs.deploy_website }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Requires Approval**: ${{ needs.validate-environment.outputs.requires_approval }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### ðŸ“Š Job Results:" >> $GITHUB_STEP_SUMMARY
        echo "- **Infrastructure**: ${{ needs.deploy-infrastructure.result || 'skipped' }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Website**: ${{ needs.deploy-website.result || 'skipped' }}" >> $GITHUB_STEP_SUMMARY